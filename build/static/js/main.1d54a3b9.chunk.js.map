{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","props","className","alt","src","id","name","email","CardList","robots","map","user","i","key","username","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","hasError","info","this","setState","Component","App","useState","setRobots","searchfield","setSearchfield","useEffect","fetch","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","event","target","value","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1d54a3b9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'; // import react to understand jsx\n\nconst Card = (props) => {\n\t\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\n\t\t\t<img alt ='robots' src ={`https://robohash.org/${props.id}?size=200x200`} />\n\t\t\n\t\t\t<div>\n\t\t\t\t<h2>{props.name}</h2>\n\t\t\t\n\t\t\t\t<p>{props.email}</p>\n\t\t\t</div>\n\t\t</div>\t\n\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\treturn (\n\t\t<div>\n\t\t\t\t{\n\t\t\t\trobots.map((user,i) => {\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\tkey ={i}\n\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\tname={robots[i].name}\n\t\t\t\t\t\tusername={robots[i].username} \n\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t}\n\t\t</div> \n\t);\n}\n\n\n\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox =({ searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\taria-label='Search Robots'\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search' \n\t\t\tplaceholder='Search Robots' \n\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\t\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props)=>{\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border:'5px solid black', height:'800px'}}>\n\t\t\t{props.children /*all the children of app.js as we are wrapping the scroll */} \n\t\t</div>\n\t\t);\n}\n\n\n\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component{\n\t\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\n\t}\n\ncomponentDidCatch(error, info) {\n\tthis.setState({hasError: true})\n}\n\nrender(){\n\tif (this.state.hasError){\n\t\treturn <h1>Oops. You made an error</h1> \n\t}\n\treturn this.props.children // everything else inside app.js will function properly\n}\n\n}\n\nexport default ErrorBoundary;","import React, { useState, useEffect } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nconst App = () => {\n\t\n\tconst [robots, setRobots] = useState([]);\n\tconst [searchfield, setSearchfield] = useState('');\n\n\tuseEffect(()=> {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response =>response.json())\n        .then(users => {setRobots(users)});\n\t}, [])\n\n\tconst onSearchChange = (event) => {\n\t\tsetSearchfield(event.target.value)\n\t}\n\n\tconst filteredRobots = robots.filter(robot =>{\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\n\t})\n\t\n\treturn !robots.length ?  // when the page takes time to load as all the names come from an api\n\t<h1>Loading</h1>:\n\t(\n\t\t<div className='tc'>\n\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t<SearchBox searchChange={onSearchChange} />\n\t\t\t<Scroll>\n\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t</ErrorBoundary>\n\t\t\t</Scroll>\n\t\t</div>\t\n\t\t);\n\t}\n\t\t\n\t\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\n\nReactDOM.render(<App />,document.getElementById('root'));// react dom package to use the function render, and it renders whatever is inside()\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register(); \n\n"],"sourceRoot":""}